name: Custom Linux Distribution Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  KERNEL_VERSION: 6.12.0
  BUSYBOX_VERSION: 1.36.1
  COREUTILS_VERSION: 9.3

jobs:
  build-linux-distro:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install Build Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          wget \
          curl \
          git \
          tar \
          gzip \
          bison \
          flex \
          libncurses5-dev \
          libssl-dev \
          bc \
          squashfs-tools \
          xorriso \
          grub2 \
          dosfstools \
          mtools

    - name: Create Build Directories
      run: |
        mkdir -p build/sources
        mkdir -p build/rootfs
        mkdir -p build/iso/boot/grub

    - name: Download Kernel
      working-directory: build/sources
      run: |
        wget https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-${KERNEL_VERSION}.tar.xz
        tar xvf linux-${KERNEL_VERSION}.tar.xz

    - name: Configure and Build Kernel
      working-directory: build/sources/linux-${KERNEL_VERSION}
      run: |
        make defconfig
        # Minimal configuration for ISO
        scripts/config --disable CONFIG_LOCALVERSION_AUTO
        scripts/config --enable CONFIG_BINFMT_MISC
        scripts/config --enable CONFIG_SQUASHFS
        make -j$(nproc)
        make modules_install INSTALL_MOD_PATH=../../rootfs
        make install INSTALL_PATH=../../iso/boot

    - name: Download and Build Busybox
      working-directory: build/sources
      run: |
        wget https://busybox.net/downloads/busybox-${BUSYBOX_VERSION}.tar.bz2
        tar xvf busybox-${BUSYBOX_VERSION}.tar.bz2
        cd busybox-${BUSYBOX_VERSION}
        make defconfig
        sed -i 's/# CONFIG_STATIC is not set/CONFIG_STATIC=y/' .config
        make -j$(nproc)
        make install CONFIG_PREFIX=../../rootfs

    - name: Download and Build Coreutils
      working-directory: build/sources
      run: |
        wget https://ftp.gnu.org/gnu/coreutils/coreutils-${COREUTILS_VERSION}.tar.xz
        tar xvf coreutils-${COREUTILS_VERSION}.tar.xz
        cd coreutils-${COREUTILS_VERSION}
        ./configure --prefix=/usr --disable-nls
        make -j$(nproc)
        make DESTDIR=../../rootfs install-strip

    - name: Prepare Rootfs
      working-directory: build
      run: |
        # Create essential directories
        mkdir -p rootfs/{proc,sys,dev,etc,bin,sbin,usr/bin,usr/sbin,lib,tmp}
        
        # Create basic /etc files
        echo "Custom Linux" > rootfs/etc/hostname
        
        cat > rootfs/etc/init.d/rcS << 'EOF'
        #!/bin/sh
        mount -t proc none /proc
        mount -t sysfs none /sys
        mount -t devtmpfs none /dev
        EOF
        chmod +x rootfs/etc/init.d/rcS

    - name: Create Initramfs
      working-directory: build
      run: |
        cd rootfs
        find . -print0 | cpio --null -ov --format=newc | gzip -9 > ../iso/boot/initrd.img

    - name: Prepare GRUB Configuration
      run: |
        cat > build/iso/boot/grub/grub.cfg << 'EOF'
        set timeout=5
        set default=0

        menuentry "Custom Linux" {
            set root=(cd)
            linux /boot/vmlinuz root=/dev/ram0 ro
            initrd /boot/initrd.img
        }

        menuentry "Memory Test" {
            linux16 /boot/memtest86+.bin
        }
        EOF

    - name: Create ISO
      working-directory: build
      run: |
        grub-mkrescue -o custom-linux.iso iso

    - name: Upload ISO Artifact
      uses: actions/upload-artifact@v4
      with:
        name: custom-linux-iso
        path: build/custom-linux.iso
        retention-days: 5

    - name: Create GitHub Release
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v2
      with:
        files: build/custom-linux.iso
        tag_name: v${{ env.KERNEL_VERSION }}
